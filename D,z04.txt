//Принцип единственной ответственности (SRP)

public class Order
{
    public string ProductName { get; set; }
    public int Quantity { get; set; }
    public double Price { get; set; }
}

public class PriceCalculator
{
    public double CalculateTotalPrice(Order order)
    {
        return order.Quantity * order.Price * 0.9; // 10% скидка
    }
}

public class PaymentProcessor
{
    public void ProcessPayment(string paymentDetails)
    {
        Console.WriteLine("Payment processed using: " + paymentDetails);
    }
}

public class NotificationService
{
    public void SendConfirmationEmail(string email)
    {
        Console.WriteLine("Confirmation email sent to: " + email);
    }
}


//Принцип открытости/закрытости (OCP)

public interface ISalaryCalculator
{
    double CalculateSalary(Employee employee);
}

public class PermanentEmployeeSalaryCalculator : ISalaryCalculator
{
    public double CalculateSalary(Employee employee)
    {
        return employee.BaseSalary * 1.2; // 20% бонус
    }
}

public class ContractEmployeeSalaryCalculator : ISalaryCalculator
{
    public double CalculateSalary(Employee employee)
    {
        return employee.BaseSalary * 1.1; // 10% бонус
    }
}


public class FreelancerSalaryCalculator : ISalaryCalculator
{
    public double CalculateSalary(Employee employee)
    {
        return employee.BaseSalary * 1.05; // 5% бонус
    }
}


//Принцип разделения интерфейсов (ISP)

public interface IPrinter
{
    void Print(string content);
}

public interface IScanner
{
    void Scan(string content);
}

public interface IFax
{
    void Fax(string content);
}

public class AllInOnePrinter : IPrinter, IScanner, IFax
{
    public void Print(string content) => Console.WriteLine("Printing: " + content);
    public void Scan(string content) => Console.WriteLine("Scanning: " + content);
    public void Fax(string content) => Console.WriteLine("Faxing: " + content);
}

public class BasicPrinter : IPrinter
{
    public void Print(string content) => Console.WriteLine("Printing: " + content);
}


//Принцип инверсии зависимостей (DIP)

public interface INotificationSender
{
    void SendNotification(string message);
}

public class EmailSender : INotificationSender
{
    public void SendNotification(string message)
    {
        Console.WriteLine("Email sent: " + message);
    }
}

public class SmsSender : INotificationSender
{
    public void SendNotification(string message)
    {
        Console.WriteLine("SMS sent: " + message);
    }
}

public class NotificationService
{
    private readonly List<INotificationSender> _notificationSenders;

    public NotificationService(List<INotificationSender> notificationSenders)
    {
        _notificationSenders = notificationSenders;
    }

    public void SendNotifications(string message)
    {
        foreach (var sender in _notificationSenders)
        {
            sender.SendNotification(message);
        }
    }
}